//! Canonical Symbol Table for NLP Attributes (spaCy-style)
//!
//! Enum + string keys + mappings

// String constants (export these for dict keys etc.)
pub const NIL: &str = "NIL";
pub const IS_ALPHA: &str = "IS_ALPHA";
pub const IS_ASCII: &str = "IS_ASCII";
pub const IS_DIGIT: &str = "IS_DIGIT";
pub const IS_LOWER: &str = "IS_LOWER";
pub const IS_PUNCT: &str = "IS_PUNCT";
pub const IS_SPACE: &str = "IS_SPACE";
pub const IS_TITLE: &str = "IS_TITLE";
pub const IS_UPPER: &str = "IS_UPPER";
pub const LIKE_URL: &str = "LIKE_URL";
pub const LIKE_NUM: &str = "LIKE_NUM";
pub const LIKE_EMAIL: &str = "LIKE_EMAIL";
pub const IS_STOP: &str = "IS_STOP";
pub const IS_OOV_DEPRECATED: &str = "IS_OOV_DEPRECATED";
pub const IS_BRACKET: &str = "IS_BRACKET";
pub const IS_QUOTE: &str = "IS_QUOTE";
pub const IS_LEFT_PUNCT: &str = "IS_LEFT_PUNCT";
pub const IS_RIGHT_PUNCT: &str = "IS_RIGHT_PUNCT";
pub const IS_CURRENCY: &str = "IS_CURRENCY";

pub const ID: &str = "ID";
pub const ORTH: &str = "ORTH";
pub const LOWER: &str = "LOWER";
pub const NORM: &str = "NORM";
pub const SHAPE: &str = "SHAPE";
pub const PREFIX: &str = "PREFIX";
pub const SUFFIX: &str = "SUFFIX";
pub const LENGTH: &str = "LENGTH";
pub const CLUSTER: &str = "CLUSTER";
pub const LEMMA: &str = "LEMMA";
pub const POS: &str = "POS";
pub const TAG: &str = "TAG";
pub const DEP: &str = "DEP";
pub const ENT_IOB: &str = "ENT_IOB";
pub const ENT_TYPE: &str = "ENT_TYPE";
pub const HEAD: &str = "HEAD";
pub const SENT_START: &str = "SENT_START";
pub const SPACY: &str = "SPACY";
pub const PROB: &str = "PROB";
pub const LANG: &str = "LANG";

pub const ADJ: &str = "ADJ";
pub const ADP: &str = "ADP";
pub const ADV: &str = "ADV";
pub const AUX: &str = "AUX";
pub const CONJ: &str = "CONJ";
pub const CCONJ: &str = "CCONJ";
pub const DET: &str = "DET";
pub const INTJ: &str = "INTJ";
pub const NOUN: &str = "NOUN";
pub const NUM: &str = "NUM";
pub const PART: &str = "PART";
pub const PRON: &str = "PRON";
pub const PROPN: &str = "PROPN";
pub const PUNCT: &str = "PUNCT";
pub const SCONJ: &str = "SCONJ";
pub const SYM: &str = "SYM";
pub const VERB: &str = "VERB";
pub const X: &str = "X";
pub const EOL: &str = "EOL";
pub const SPACE: &str = "SPACE";

// --- NER/entity and other tags as needed, e.g.:
pub const PERSON: &str = "PERSON";
pub const ORG: &str = "ORG";
pub const LOC: &str = "LOC";
// (add more for full coverage as needed)

// ------ The enum definition ------
#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
#[repr(u16)]
pub enum Symbol {
    NIL = 0,
    IS_ALPHA,
    IS_ASCII,
    IS_DIGIT,
    IS_LOWER,
    IS_PUNCT,
    IS_SPACE,
    IS_TITLE,
    IS_UPPER,
    LIKE_URL,
    LIKE_NUM,
    LIKE_EMAIL,
    IS_STOP,
    IS_OOV_DEPRECATED,
    IS_BRACKET,
    IS_QUOTE,
    IS_LEFT_PUNCT,
    IS_RIGHT_PUNCT,
    IS_CURRENCY,

    FLAG19,
    FLAG20,
    FLAG21,
    FLAG22,
    FLAG23,
    FLAG24,
    FLAG25,
    FLAG26,
    FLAG27,
    FLAG28,
    FLAG29,
    FLAG30,
    FLAG31,
    FLAG32,
    FLAG33,
    FLAG34,
    FLAG35,
    FLAG36,
    FLAG37,
    FLAG38,
    FLAG39,
    FLAG40,
    FLAG41,
    FLAG42,
    FLAG43,
    FLAG44,
    FLAG45,
    FLAG46,
    FLAG47,
    FLAG48,
    FLAG49,
    FLAG50,
    FLAG51,
    FLAG52,
    FLAG53,
    FLAG54,
    FLAG55,
    FLAG56,
    FLAG57,
    FLAG58,
    FLAG59,
    FLAG60,
    FLAG61,
    FLAG62,
    FLAG63,

    ID,
    ORTH,
    LOWER,
    NORM,
    SHAPE,
    PREFIX,
    SUFFIX,
    LENGTH,
    CLUSTER,
    LEMMA,
    POS,
    TAG,
    DEP,
    ENT_IOB,
    ENT_TYPE,
    HEAD,
    SENT_START,
    SPACY,
    PROB,
    LANG,
    // --- POS/NER/Entity Tags ---
    ADJ,
    ADP,
    ADV,
    AUX,
    CONJ,
    CCONJ,
    DET,
    INTJ,
    NOUN,
    NUM,
    PART,
    PRON,
    PROPN,
    PUNCT,
    SCONJ,
    SYM,
    VERB,
    X,
    EOL,
    SPACE,

    // --- (Example) NER tags, add as needed ---
    PERSON,
    NORP,
    FACILITY,
    ORG,
    GPE,
    LOC,
    PRODUCT,
    EVENT,
    WORK_OF_ART,
    LANGUAGE,
    LAW,

    DATE,
    TIME,
    PERCENT,
    MONEY,
    QUANTITY,
    ORDINAL,
    CARDINAL,

    acomp,
    advcl,
    advmod,
    agent,
    amod,
    appos,
    attr,
    aux,
    auxpass,
    cc,
    ccomp,
    complm,
    conj,
    cop,
    csubj,
    csubjpass,
    dep,
    det,
    dobj,
    expl,
    hmod,
    hyph,
    infmod,
    intj,
    iobj,
    mark,
    meta,
    neg,
    nmod,
    nn,
    npadvmod,
    nsubj,
    nsubjpass,
    num,
    number,
    oprd,
    obj,
    obl,
    parataxis,
    partmod,
    pcomp,
    pobj,
    poss,
    possessive,
    preconj,
    prep,
    prt,
    punct,
    quantmod,
    rcmod,
    relcl,
    root,
    xcomp,

    acl,

    ENT_KB_ID,
    MORPH,
    ENT_ID,

    IDX,
    PLACEHOLDER,

    // --- Massive deprecated block (expand as needed, showing a representative sample) ---
    DEPRECATED001,
    DEPRECATED002,
    DEPRECATED003,
    DEPRECATED004,
    DEPRECATED005,
    DEPRECATED006,
    DEPRECATED007,
    DEPRECATED008,
    DEPRECATED009,
    DEPRECATED010,
    DEPRECATED011,
    DEPRECATED012,
    DEPRECATED013,
    DEPRECATED014,
    DEPRECATED015,
    DEPRECATED016,
    DEPRECATED017,
    DEPRECATED018,
    DEPRECATED019,
    DEPRECATED020,
    DEPRECATED021,
    DEPRECATED022,
    DEPRECATED023,
    DEPRECATED024,
    DEPRECATED025,
    DEPRECATED026,
    DEPRECATED027,
    DEPRECATED028,
    DEPRECATED029,
    DEPRECATED030,
    DEPRECATED031,
    DEPRECATED032,
    DEPRECATED033,
    DEPRECATED034,
    DEPRECATED035,
    DEPRECATED036,
    DEPRECATED037,
    DEPRECATED038,
    DEPRECATED039,
    DEPRECATED040,
    DEPRECATED041,
    DEPRECATED042,
    DEPRECATED043,
    DEPRECATED044,
    DEPRECATED045,
    DEPRECATED046,
    DEPRECATED047,
    DEPRECATED048,
    DEPRECATED049,
    DEPRECATED050,
    DEPRECATED051,
    DEPRECATED052,
    DEPRECATED053,
    DEPRECATED054,
    DEPRECATED055,
    DEPRECATED056,
    DEPRECATED057,
    DEPRECATED058,
    DEPRECATED059,
    DEPRECATED060,
    DEPRECATED061,
    DEPRECATED062,
    DEPRECATED063,
    DEPRECATED064,
    DEPRECATED065,
    DEPRECATED066,
    DEPRECATED067,
    DEPRECATED068,
    DEPRECATED069,
    DEPRECATED070,
    DEPRECATED071,
    DEPRECATED072,
    DEPRECATED073,
    DEPRECATED074,
    DEPRECATED075,
    DEPRECATED076,
    DEPRECATED077,
    DEPRECATED078,
    DEPRECATED079,
    DEPRECATED080,
    DEPRECATED081,
    DEPRECATED082,
    DEPRECATED083,
    DEPRECATED084,
    DEPRECATED085,
    DEPRECATED086,
    DEPRECATED087,
    DEPRECATED088,
    DEPRECATED089,
    DEPRECATED090,
    DEPRECATED091,
    DEPRECATED092,
    DEPRECATED093,
    DEPRECATED094,
    DEPRECATED095,
    DEPRECATED096,
    DEPRECATED097,
    DEPRECATED098,
    DEPRECATED099,
    DEPRECATED100,
    DEPRECATED101,
    DEPRECATED102,
    DEPRECATED103,
    DEPRECATED104,
    DEPRECATED105,
    DEPRECATED106,
    DEPRECATED107,
    DEPRECATED108,
    DEPRECATED109,
    DEPRECATED110,
    DEPRECATED111,
    DEPRECATED112,
    DEPRECATED113,
    DEPRECATED114,
    DEPRECATED115,
    DEPRECATED116,
    DEPRECATED117,
    DEPRECATED118,
    DEPRECATED119,
    DEPRECATED120,
    DEPRECATED121,
    DEPRECATED122,
    DEPRECATED123,
    DEPRECATED124,
    DEPRECATED125,
    DEPRECATED126,
    DEPRECATED127,
    DEPRECATED128,
    DEPRECATED129,
    DEPRECATED130,
    DEPRECATED131,
    DEPRECATED132,
    DEPRECATED133,
    DEPRECATED134,
    DEPRECATED135,
    DEPRECATED136,
    DEPRECATED137,
    DEPRECATED138,
    DEPRECATED139,
    DEPRECATED140,
    DEPRECATED141,
    DEPRECATED142,
    DEPRECATED143,
    DEPRECATED144,
    DEPRECATED145,
    DEPRECATED146,
    DEPRECATED147,
    DEPRECATED148,
    DEPRECATED149,
    DEPRECATED150,
    DEPRECATED151,
    DEPRECATED152,
    DEPRECATED153,
    DEPRECATED154,
    DEPRECATED155,
    DEPRECATED156,
    DEPRECATED157,
    DEPRECATED158,
    DEPRECATED159,
    DEPRECATED160,
    DEPRECATED161,
    DEPRECATED162,
    DEPRECATED163,
    DEPRECATED164,
    DEPRECATED165,
    DEPRECATED166,
    DEPRECATED167,
    DEPRECATED168,
    DEPRECATED169,
    DEPRECATED170,
    DEPRECATED171,
    DEPRECATED172,
    DEPRECATED173,
    DEPRECATED174,
    DEPRECATED175,
    DEPRECATED176,
    DEPRECATED177,
    DEPRECATED178,
    DEPRECATED179,
    DEPRECATED180,
    DEPRECATED181,
    DEPRECATED182,
    DEPRECATED183,
    DEPRECATED184,
    DEPRECATED185,
    DEPRECATED186,
    DEPRECATED187,
    DEPRECATED188,
    DEPRECATED189,
    DEPRECATED190,
    DEPRECATED191,
    DEPRECATED192,
    DEPRECATED193,
    DEPRECATED194,
    DEPRECATED195,
    DEPRECATED196,
    DEPRECATED197,
    DEPRECATED198,
    DEPRECATED199,
    DEPRECATED200,
    DEPRECATED201,
    DEPRECATED202,
    DEPRECATED203,
    DEPRECATED204,
    DEPRECATED205,
    DEPRECATED206,
    DEPRECATED207,
    DEPRECATED208,
    DEPRECATED209,
    DEPRECATED210,
    DEPRECATED211,
    DEPRECATED212,
    DEPRECATED213,
    DEPRECATED214,
    DEPRECATED215,
    DEPRECATED216,
    DEPRECATED217,
    DEPRECATED218,
    DEPRECATED219,
    DEPRECATED220,
    DEPRECATED221,
    DEPRECATED222,
    DEPRECATED223,
    DEPRECATED224,
    DEPRECATED225,
    DEPRECATED226,
    DEPRECATED227,
    DEPRECATED228,
    DEPRECATED229,
    DEPRECATED230,
    DEPRECATED231,
    DEPRECATED232,
    DEPRECATED233,
    DEPRECATED234,
    DEPRECATED235,
    DEPRECATED236,
    DEPRECATED237,
    DEPRECATED238,
    DEPRECATED239,
    DEPRECATED240,
    DEPRECATED241,
    DEPRECATED242,
    DEPRECATED243,
    DEPRECATED244,
    DEPRECATED245,
    DEPRECATED246,
    DEPRECATED247,
    DEPRECATED248,
    DEPRECATED249,
    DEPRECATED250,
    DEPRECATED251,
    DEPRECATED252,
    DEPRECATED253,
    DEPRECATED254,
    DEPRECATED255,
    DEPRECATED256,
    DEPRECATED257,
    DEPRECATED258,
    DEPRECATED259,
    DEPRECATED260,
    DEPRECATED261,
    DEPRECATED262,
    DEPRECATED263,
    DEPRECATED264,
    DEPRECATED265,
    DEPRECATED266,
    DEPRECATED267,
    DEPRECATED268,
    DEPRECATED269,
    DEPRECATED270,
    DEPRECATED271,
    DEPRECATED272,
    DEPRECATED273,
    DEPRECATED274,
    DEPRECATED275,
    DEPRECATED276,
}
impl Symbol {
    /// Convert a Symbol enum to its canonical string key (for dict keys, etc.)
    pub fn as_str(&self) -> &'static str {
        match self {
            Symbol::NIL => "NIL",
            Symbol::IS_ALPHA => "IS_ALPHA",
            Symbol::IS_ASCII => "IS_ASCII",
            Symbol::IS_DIGIT => "IS_DIGIT",
            Symbol::IS_LOWER => "IS_LOWER",
            Symbol::IS_PUNCT => "IS_PUNCT",
            Symbol::IS_SPACE => "IS_SPACE",
            Symbol::IS_TITLE => "IS_TITLE",
            Symbol::IS_UPPER => "IS_UPPER",
            Symbol::LIKE_URL => "LIKE_URL",
            Symbol::LIKE_NUM => "LIKE_NUM",
            Symbol::LIKE_EMAIL => "LIKE_EMAIL",
            Symbol::IS_STOP => "IS_STOP",
            Symbol::IS_OOV_DEPRECATED => "IS_OOV_DEPRECATED",
            Symbol::IS_BRACKET => "IS_BRACKET",
            Symbol::IS_QUOTE => "IS_QUOTE",
            Symbol::IS_LEFT_PUNCT => "IS_LEFT_PUNCT",
            Symbol::IS_RIGHT_PUNCT => "IS_RIGHT_PUNCT",
            Symbol::IS_CURRENCY => "IS_CURRENCY",
            Symbol::ID => "ID",
            Symbol::ORTH => "ORTH",
            Symbol::LOWER => "LOWER",
            Symbol::NORM => "NORM",
            Symbol::SHAPE => "SHAPE",
            Symbol::PREFIX => "PREFIX",
            Symbol::SUFFIX => "SUFFIX",
            Symbol::LENGTH => "LENGTH",
            Symbol::CLUSTER => "CLUSTER",
            Symbol::LEMMA => "LEMMA",
            Symbol::POS => "POS",
            Symbol::TAG => "TAG",
            Symbol::DEP => "DEP",
            Symbol::ENT_IOB => "ENT_IOB",
            Symbol::ENT_TYPE => "ENT_TYPE",
            Symbol::HEAD => "HEAD",
            Symbol::SENT_START => "SENT_START",
            Symbol::SPACY => "SPACY",
            Symbol::PROB => "PROB",
            Symbol::LANG => "LANG",
            Symbol::ADJ => "ADJ",
            Symbol::ADP => "ADP",
            Symbol::ADV => "ADV",
            Symbol::AUX => "AUX",
            Symbol::CONJ => "CONJ",
            Symbol::CCONJ => "CCONJ",
            Symbol::DET => "DET",
            Symbol::INTJ => "INTJ",
            Symbol::NOUN => "NOUN",
            Symbol::NUM => "NUM",
            Symbol::PART => "PART",
            Symbol::PRON => "PRON",
            Symbol::PROPN => "PROPN",
            Symbol::PUNCT => "PUNCT",
            Symbol::SCONJ => "SCONJ",
            Symbol::SYM => "SYM",
            Symbol::VERB => "VERB",
            Symbol::X => "X",
            Symbol::EOL => "EOL",
            Symbol::SPACE => "SPACE",

            // --- Entity types ---
            Symbol::PERSON => "PERSON",
            Symbol::NORP => "NORP",
            Symbol::FACILITY => "FACILITY",
            Symbol::ORG => "ORG",
            Symbol::GPE => "GPE",
            Symbol::LOC => "LOC",
            Symbol::PRODUCT => "PRODUCT",
            Symbol::EVENT => "EVENT",
            Symbol::WORK_OF_ART => "WORK_OF_ART",
            Symbol::LANGUAGE => "LANGUAGE",
            Symbol::LAW => "LAW",

            Symbol::DATE => "DATE",
            Symbol::TIME => "TIME",
            Symbol::PERCENT => "PERCENT",
            Symbol::MONEY => "MONEY",
            Symbol::QUANTITY => "QUANTITY",
            Symbol::ORDINAL => "ORDINAL",
            Symbol::CARDINAL => "CARDINAL",

            // --- Syntactic dependency labels (sample) ---
            Symbol::acomp => "acomp",
            Symbol::advcl => "advcl",
            Symbol::advmod => "advmod",
            Symbol::agent => "agent",
            Symbol::amod => "amod",
            Symbol::appos => "appos",
            Symbol::attr => "attr",
            Symbol::aux => "aux",
            Symbol::auxpass => "auxpass",
            Symbol::cc => "cc",
            Symbol::ccomp => "ccomp",
            Symbol::complm => "complm",
            Symbol::conj => "conj",
            Symbol::cop => "cop",
            Symbol::csubj => "csubj",
            Symbol::csubjpass => "csubjpass",
            Symbol::dep => "dep",
            Symbol::det => "det",
            Symbol::dobj => "dobj",
            Symbol::expl => "expl",
            Symbol::hmod => "hmod",
            Symbol::hyph => "hyph",
            Symbol::infmod => "infmod",
            Symbol::intj => "intj",
            Symbol::iobj => "iobj",
            Symbol::mark => "mark",
            Symbol::meta => "meta",
            Symbol::neg => "neg",
            Symbol::nmod => "nmod",
            Symbol::nn => "nn",
            Symbol::npadvmod => "npadvmod",
            Symbol::nsubj => "nsubj",
            Symbol::nsubjpass => "nsubjpass",
            Symbol::num => "num",
            Symbol::number => "number",
            Symbol::oprd => "oprd",
            Symbol::obj => "obj",
            Symbol::obl => "obl",
            Symbol::parataxis => "parataxis",
            Symbol::partmod => "partmod",
            Symbol::pcomp => "pcomp",
            Symbol::pobj => "pobj",
            Symbol::poss => "poss",
            Symbol::possessive => "possessive",
            Symbol::preconj => "preconj",
            Symbol::prep => "prep",
            Symbol::prt => "prt",
            Symbol::punct => "punct",
            Symbol::quantmod => "quantmod",
            Symbol::rcmod => "rcmod",
            Symbol::relcl => "relcl",
            Symbol::root => "root",
            Symbol::xcomp => "xcomp",

            Symbol::acl => "acl",

            Symbol::ENT_KB_ID => "ENT_KB_ID",
            Symbol::MORPH => "MORPH",
            Symbol::ENT_ID => "ENT_ID",

            Symbol::IDX => "IDX",
            Symbol::_ => "_",

            // --- DEPRECATED (showing sample; you would expand this list as in your enum) ---
            Symbol::DEPRECATED001 => "DEPRECATED001",
            Symbol::DEPRECATED002 => "DEPRECATED002",
            Symbol::DEPRECATED003 => "DEPRECATED003",
            // ...repeat for all DEPRECATEDxxx variants...
            Symbol::DEPRECATED276 => "DEPRECATED276",

            // --- Flags (if you want to handle) ---
            Symbol::FLAG19 => "FLAG19",
            Symbol::FLAG20 => "FLAG20",
            Symbol::FLAG21 => "FLAG21",
            Symbol::FLAG22 => "FLAG22",
            Symbol::FLAG23 => "FLAG23",
            Symbol::FLAG24 => "FLAG24",
            Symbol::FLAG25 => "FLAG25",
            Symbol::FLAG26 => "FLAG26",
            Symbol::FLAG27 => "FLAG27",
            Symbol::FLAG28 => "FLAG28",
            Symbol::FLAG29 => "FLAG29",
            Symbol::FLAG30 => "FLAG30",
            Symbol::FLAG31 => "FLAG31",
            Symbol::FLAG32 => "FLAG32",
            Symbol::FLAG33 => "FLAG33",
            Symbol::FLAG34 => "FLAG34",
            Symbol::FLAG35 => "FLAG35",
            Symbol::FLAG36 => "FLAG36",
            Symbol::FLAG37 => "FLAG37",
            Symbol::FLAG38 => "FLAG38",
            Symbol::FLAG39 => "FLAG39",
            Symbol::FLAG40 => "FLAG40",
            Symbol::FLAG41 => "FLAG41",
            Symbol::FLAG42 => "FLAG42",
            Symbol::FLAG43 => "FLAG43",
            Symbol::FLAG44 => "FLAG44",
            Symbol::FLAG45 => "FLAG45",
            Symbol::FLAG46 => "FLAG46",
            Symbol::FLAG47 => "FLAG47",
            Symbol::FLAG48 => "FLAG48",
            Symbol::FLAG49 => "FLAG49",
            Symbol::FLAG50 => "FLAG50",
            Symbol::FLAG51 => "FLAG51",
            Symbol::FLAG52 => "FLAG52",
            Symbol::FLAG53 => "FLAG53",
            Symbol::FLAG54 => "FLAG54",
            Symbol::FLAG55 => "FLAG55",
            Symbol::FLAG56 => "FLAG56",
            Symbol::FLAG57 => "FLAG57",
            Symbol::FLAG58 => "FLAG58",
            Symbol::FLAG59 => "FLAG59",
            Symbol::FLAG60 => "FLAG60",
            Symbol::FLAG61 => "FLAG61",
            Symbol::FLAG62 => "FLAG62",
            Symbol::FLAG63 => "FLAG63",
        }
    }

    /// Convert from a string to the Symbol enum (if known)
    pub fn from_str(s: &str) -> Option<Self> {
        match s {
            "NIL" => Some(Symbol::NIL),
            "IS_ALPHA" => Some(Symbol::IS_ALPHA),
            "IS_ASCII" => Some(Symbol::IS_ASCII),
            "IS_DIGIT" => Some(Symbol::IS_DIGIT),
            "IS_LOWER" => Some(Symbol::IS_LOWER),
            "IS_PUNCT" => Some(Symbol::IS_PUNCT),
            "IS_SPACE" => Some(Symbol::IS_SPACE),
            "IS_TITLE" => Some(Symbol::IS_TITLE),
            "IS_UPPER" => Some(Symbol::IS_UPPER),
            "LIKE_URL" => Some(Symbol::LIKE_URL),
            "LIKE_NUM" => Some(Symbol::LIKE_NUM),
            "LIKE_EMAIL" => Some(Symbol::LIKE_EMAIL),
            "IS_STOP" => Some(Symbol::IS_STOP),
            "IS_OOV_DEPRECATED" => Some(Symbol::IS_OOV_DEPRECATED),
            "IS_BRACKET" => Some(Symbol::IS_BRACKET),
            "IS_QUOTE" => Some(Symbol::IS_QUOTE),
            "IS_LEFT_PUNCT" => Some(Symbol::IS_LEFT_PUNCT),
            "IS_RIGHT_PUNCT" => Some(Symbol::IS_RIGHT_PUNCT),
            "IS_CURRENCY" => Some(Symbol::IS_CURRENCY),
            "ID" => Some(Symbol::ID),
            "ORTH" => Some(Symbol::ORTH),
            "LOWER" => Some(Symbol::LOWER),
            "NORM" => Some(Symbol::NORM),
            "SHAPE" => Some(Symbol::SHAPE),
            "PREFIX" => Some(Symbol::PREFIX),
            "SUFFIX" => Some(Symbol::SUFFIX),
            "LENGTH" => Some(Symbol::LENGTH),
            "CLUSTER" => Some(Symbol::CLUSTER),
            "LEMMA" => Some(Symbol::LEMMA),
            "POS" => Some(Symbol::POS),
            "TAG" => Some(Symbol::TAG),
            "DEP" => Some(Symbol::DEP),
            "ENT_IOB" => Some(Symbol::ENT_IOB),
            "ENT_TYPE" => Some(Symbol::ENT_TYPE),
            "HEAD" => Some(Symbol::HEAD),
            "SENT_START" => Some(Symbol::SENT_START),
            "SPACY" => Some(Symbol::SPACY),
            "PROB" => Some(Symbol::PROB),
            "LANG" => Some(Symbol::LANG),
            "ADJ" => Some(Symbol::ADJ),
            "ADP" => Some(Symbol::ADP),
            "ADV" => Some(Symbol::ADV),
            "AUX" => Some(Symbol::AUX),
            "CONJ" => Some(Symbol::CONJ),
            "CCONJ" => Some(Symbol::CCONJ),
            "DET" => Some(Symbol::DET),
            "INTJ" => Some(Symbol::INTJ),
            "NOUN" => Some(Symbol::NOUN),
            "NUM" => Some(Symbol::NUM),
            "PART" => Some(Symbol::PART),
            "PRON" => Some(Symbol::PRON),
            "PROPN" => Some(Symbol::PROPN),
            "PUNCT" => Some(Symbol::PUNCT),
            "SCONJ" => Some(Symbol::SCONJ),
            "SYM" => Some(Symbol::SYM),
            "VERB" => Some(Symbol::VERB),
            "X" => Some(Symbol::X),
            "EOL" => Some(Symbol::EOL),
            "SPACE" => Some(Symbol::SPACE),

            // --- Entities ---
            "PERSON" => Some(Symbol::PERSON),
            "NORP" => Some(Symbol::NORP),
            "FACILITY" => Some(Symbol::FACILITY),
            "ORG" => Some(Symbol::ORG),
            "GPE" => Some(Symbol::GPE),
            "LOC" => Some(Symbol::LOC),
            "PRODUCT" => Some(Symbol::PRODUCT),
            "EVENT" => Some(Symbol::EVENT),
            "WORK_OF_ART" => Some(Symbol::WORK_OF_ART),
            "LANGUAGE" => Some(Symbol::LANGUAGE),
            "LAW" => Some(Symbol::LAW),
            "DATE" => Some(Symbol::DATE),
            "TIME" => Some(Symbol::TIME),
            "PERCENT" => Some(Symbol::PERCENT),
            "MONEY" => Some(Symbol::MONEY),
            "QUANTITY" => Some(Symbol::QUANTITY),
            "ORDINAL" => Some(Symbol::ORDINAL),
            "CARDINAL" => Some(Symbol::CARDINAL),
            // ...rest of dependencies/entities/flags/deprecated as in as_str...
            _ => None,
        }
    }
}
/// Return a vector of all canonical symbol names, in order.
/// Like spaCy’s NAMES.
pub fn all_symbol_names() -> Vec<&'static str> {
    vec![
        "NIL",
        "IS_ALPHA",
        "IS_ASCII",
        "IS_DIGIT",
        "IS_LOWER",
        "IS_PUNCT",
        "IS_SPACE",
        "IS_TITLE",
        "IS_UPPER",
        "LIKE_URL",
        "LIKE_NUM",
        "LIKE_EMAIL",
        "IS_STOP",
        "IS_OOV_DEPRECATED",
        "IS_BRACKET",
        "IS_QUOTE",
        "IS_LEFT_PUNCT",
        "IS_RIGHT_PUNCT",
        "IS_CURRENCY",
        "FLAG19", "FLAG20", "FLAG21", "FLAG22", "FLAG23", "FLAG24", "FLAG25", "FLAG26",
        "FLAG27", "FLAG28", "FLAG29", "FLAG30", "FLAG31", "FLAG32", "FLAG33", "FLAG34",
        "FLAG35", "FLAG36", "FLAG37", "FLAG38", "FLAG39", "FLAG40", "FLAG41", "FLAG42",
        "FLAG43", "FLAG44", "FLAG45", "FLAG46", "FLAG47", "FLAG48", "FLAG49", "FLAG50",
        "FLAG51", "FLAG52", "FLAG53", "FLAG54", "FLAG55", "FLAG56", "FLAG57", "FLAG58",
        "FLAG59", "FLAG60", "FLAG61", "FLAG62", "FLAG63",
        "ID", "ORTH", "LOWER", "NORM", "SHAPE", "PREFIX", "SUFFIX",
        "LENGTH", "CLUSTER", "LEMMA", "POS", "TAG", "DEP", "ENT_IOB", "ENT_TYPE",
        "HEAD", "SENT_START", "SPACY", "PROB", "LANG",
        "ADJ", "ADP", "ADV", "AUX", "CONJ", "CCONJ", "DET", "INTJ", "NOUN", "NUM",
        "PART", "PRON", "PROPN", "PUNCT", "SCONJ", "SYM", "VERB", "X", "EOL", "SPACE",
        "PERSON", "NORP", "FACILITY", "ORG", "GPE", "LOC", "PRODUCT", "EVENT",
        "WORK_OF_ART", "LANGUAGE", "LAW",
        "DATE", "TIME", "PERCENT", "MONEY", "QUANTITY", "ORDINAL", "CARDINAL",
        "acomp", "advcl", "advmod", "agent", "amod", "appos", "attr", "aux", "auxpass",
        "cc", "ccomp", "complm", "conj", "cop", "csubj", "csubjpass", "dep", "det",
        "dobj", "expl", "hmod", "hyph", "infmod", "intj", "iobj", "mark", "meta",
        "neg", "nmod", "nn", "npadvmod", "nsubj", "nsubjpass", "num", "number", "oprd",
        "obj", "obl", "parataxis", "partmod", "pcomp", "pobj", "poss", "possessive",
        "preconj", "prep", "prt", "punct", "quantmod", "rcmod", "relcl", "root",
        "xcomp", "acl", "ENT_KB_ID", "MORPH", "ENT_ID", "IDX", "_",
        // All DEPRECATED entries
        "DEPRECATED001", "DEPRECATED002", "DEPRECATED003", /* ... */ "DEPRECATED276",
    ]
}

// ------ Docs and usage ------

/*
    # Example Usage

    use crate::symbols::{Symbol, all_symbol_names};

    fn main() {
        // Convert from Symbol enum to string:
        let s = Symbol::NOUN;
        println!("Symbol for NOUN: {}", s.as_str());  // Output: "NOUN"

        // Convert from string to Symbol enum:
        if let Some(symbol) = Symbol::from_str("NUM") {
            println!("NUM as enum: {:?}", symbol);
        }

        // List all symbol names
        let all = all_symbol_names();
        println!("All symbols: {:?}", all);
    }
*/

/// This module is auto-generated to closely match spaCy’s symbol tables in Python.
/// Add or remove fields as needed for your own pipeline.
/// This file is 100% safe to expand or script-generate for your needs.
/// Author: (your name/project)
